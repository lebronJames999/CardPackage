<template>
  <view class="input-panel">
    <view class="input__title">
      充值金额
    </view>
    <view class="input__container flex flex--y-center">
      <text class="money__logo">￥</text>
      <input class="money__input" type="digit" @input="inputMoney" placeholder="输入充值金额" />
    </view>
  </view>

  <button class="charge-btn {{unableCharge ? 'charge-btn-disabled' : '' }}" @tap="charge" disabled="{{unableCharge}}">{{isCharging ? '正在充值...' : '确定'}}</button>
</template>

<script>
import wepy from 'wepy'
import { genChargeOrder } from '../net/requests'
import { noLineGuid } from '../lib/utils'
import { getStore } from 'wepy-redux'
import { syncCards } from '../store/actions';

const store = getStore()

export default class extends wepy.page {
  data = {
    cardId: undefined,
    cardNo: undefined,
    shopId: undefined,
    money: undefined,
    isCharging: false
  }

  onLoad(options) {
    this.cardId = options.cardId;
    this.cardNo = options.cardNo;
    this.shopId = options.shopId;
  }

  computed = {
    unableCharge() {
      return this.isCharging || +this.money === 0 || !this.money;
    }
  }

  methods = {
    inputMoney(e) {
      const val = e.detail.value;
      
      if (!this.money) {
        this.money = val === '.' ? '0.' : val
      } else if (val === '') {
        this.money = ''
      } else if (this.money == 0 && !val.includes('.')) {
        this.money = val.slice(1)
      } else if (/^\d{1,8}(\.?|\.\d{1,2})$/.test(val)) {
        this.money = val
      } 
      return this.money

      // this.money = +e.detail.value
      // return 1
    },
    async charge() {
      this.isCharging = true;

      const param = {
        cardId: +this.cardId,
        cardNo: this.cardNo,
        shopId: +this.shopId,
        rechargeFee: +this.money * 100
      }

      const orderRes = await genChargeOrder(param)
      if (!orderRes.code === 200) {
        wepy.showToast({
          icon: 'none',
          title: '创建订单失败'
        })

        this.isCharging = false
        return
      }
      let order = orderRes.data
      order = {
        ...order,
        ...{
          package: order._package
        }
      }
      wepy.requestPayment(order)
      .then(res => {
        if (res.errMsg === 'requestPayment:ok') {
          wepy.showToast({
            icon: success,
            title: '充值成功'
          })
          store.dispatch(syncCards())
        }
        this.isCharging = false
        this.$apply()
      })
      .catch(e => {
        wepy.showToast({
          icon: 'none',
          title: e.message
        })
        this.isCharging = false
        this.$apply()
      })
    }
  }
}
</script>

<style lang="less">
page {
  background-color: #f5f5f5;
}

.input-panel {
  background-color: #fff;
  margin-top: 20rpx;
  padding: 34rpx 36rpx;

  .input__title {
    font-size: 32rpx;
    color: #333;
  }

  .input__container {
    margin-top: 50rpx;
    // height: 200rpx;
  }

  .money__logo {
    font-size: 44rpx;
    color: #333;
  }

  .money__input {
    display: block;
    height: 66rpx;
    font-size: 48rpx;
    color: #333;
    // padding-left: 10rpx;
    padding:  10rpx;
    &::-webkit-input-placeholder {
      color: #ccc;
    }
  }
}

.charge-btn {
  font-size: 32rpx;
  color: #fff;
  background-color: #00aaff;
  opacity: 1;
  margin: 80rpx 24rpx 0 24rpx;

  &.charge-btn-disabled {
    opacity: .3;
    background-color: #00aaff !important;
    color: #fff !important;
  }
}


</style>
